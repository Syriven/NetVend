---ASAP---


---NEXT GOOD BREAK---

redesign all error handling. when to use what? research, and search for asserts, catches, throws and cerrs.

make 'init_database' program (good enough for now)
    don't worry about deleting/recreating database yet
    drop tables
    insert tables as in tables.sql

resolve writeToVch/writeDataToVch (make former virtual and overridden by child, which call's parent virtual before doing its own packing)
    same with writeToSocket/writeDataToSocket

change pack to be able to handle bool's

calling work::commit after only select queries: does this save the server time by basically saying "ok i'm done", or is this a useless line of code?


---BEFORE PUBLISHING---

reconfigure postgresql to be secure

method names "writeToSocket"/"readFromSocket" vs "writeDataToSocket"/"readDataFromSocket" are confusing. figure out a better solution

change 'magic numbers' 255 and 65535 into appropriate constants

rename 'commands' namespace
rename 'nv_packet' and 'nv_response' files/namespaces

document encoding scheme

rethink addr version byte?

COMMENT EVERYTHING

breakup long lines


---UPCOMING VERSIONS---

DDOS guards:
    check size of incoming data chunks. handle somehow?
        maybe, limit "regular" command size to handleable size,
        and for larger data chunks, 1. verify sig on data *command*;
        2. deduct fee; 3. read data and verify second sig for data itself
    
    also, allow "free" interaction, but still track cost, and autoban IPs
    that request too much processing without starting to pay
